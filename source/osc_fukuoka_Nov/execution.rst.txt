プログラムの実行
============================================================

プログラムの実行について、処理系の動きを少しだけ深堀りします。

``if`` 文のサンプルプログラムを実行
------------------------------------------------

.. literalinclude:: ../../samplecode/reintro/roland.py
    :language: python
    :lines: 5-9
    :linenos:

.. code-block:: shell

    $ python3 roland.py
    名前を入力してください: ローランド
    俺か

:command:`python3 roland.py`
------------------------------------------------

* パスで指定したファイルに書かれた **プログラムが処理系に渡る**
* リファレンスでは `9. トップレベル要素 <https://docs.python.org/ja/3/reference/toplevel_components.html>`_ で説明（「完全な Python プログラム」や「ファイル入力」）
* 標準入力からプログラムを渡すこともできます（が、 :file:`roland.py` は ``input`` があるのでうまく動きません）

渡されたプログラムを処理する要素
------------------------------------------------

* 字句解析器
* パーザ
* （抽象構文木やバイトコードの実行などあると思いますが、今回はスコープアウトとさせてください）

字句解析器とパーザ
------------------------------------------------

    パーザへの入力は、 字句解析器 (lexical analyzer) によって生成された一連の トークン (token) からなります。
    この章では、字句解析器がファイルをトークン列に分解する方法について解説します。

`2. 字句解析 <https://docs.python.org/ja/3/reference/lexical_analysis.html#lexical-analysis>`_

トークンの種類
------------------------------------------------

    NEWLINE、INDENT、および DEDENT の他、以下のトークンのカテゴリ: 識別子 (identifier), キーワード(keyword), リテラル, 演算子 (operator), デリミタ (delimiter) が存在します。

`2.2. その他のトークン <https://docs.python.org/ja/3/reference/lexical_analysis.html#other-tokens>`_

字句解析器とパーザ
------------------------------------------------

1. 字句解析器：プログラムをトークンに分解する
2. **パーザ**：トークンが入力される 👈 こちらが扱う「構文」について見ていきます

お品書き：文に立ち返って再入門するPython
------------------------------------------------

* プログラムの実行
* **式**
* 文
* 構文
