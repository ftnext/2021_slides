.. role:: raw-html(raw)
    :format: html

======================================================================
テスト駆動開発と私
======================================================================

:Event: Tech BASE Okinawa
:Presented: 2021/12/18 nikkie

はじめまして、nikkie（にっきー）です
======================================================================

nikkie（にっきー）
------------------------------------------------

* **東京** から来ました（飛行機に乗り遅れたりしながら・・）
* よく使う言語： **Python** （株式会社ユーザベースのデータサイエンティスト）
* Python Conference JPのスタッフ活動（2021の **座長** です）

アンケート：Pythonちょっとでも書いたことある方？🙋‍♂️
----------------------------------------------------------

初の沖縄の感想：冬過ごすのに絶好では？
------------------------------------------------

.. raw:: html

    <blockquote class="twitter-tweet"><p lang="ja" dir="ltr">12月に訪れた沖縄の感想<br><br>暖房入ってますよね？</p>&mdash; nikkie 📣PyCon JP 2021 ありがとうございました (@ftnext) <a href="https://twitter.com/ftnext/status/1471863785241845760?ref_src=twsrc%5Etfw">December 17, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

このLTでは、テスト駆動開発を始めてからの私の **変化** を共有します
================================================================================

注：「私」の話なので、 **N=1** です。経験は2年くらい

お品書き：テスト駆動開発と私
------------------------------------------------

* 認知
* 実践開始
* 実践中

お品書き：テスト駆動開発と私
------------------------------------------------

* **認知** （用語として知った）
* 実践開始
* 実践中

認知：Pythonコミュニティで「テスト駆動開発」と出会った
======================================================================

2018/02 `PyLadies Tokyo Meetup #29 テストをまなぼう <https://pyladies-tokyo.connpass.com/event/76967/>`_
------------------------------------------------------------------------------------------------------------------------------------------------

* わかりやすい資料 :raw-html:`<i class="fab fa-github"></i>` https://github.com/okusama27/pyladies_2018_02/blob/master/samples/fizzbuzz/test_fizzbuzz_6.py
* Python **独学** 時代に、マネてテストコードを書いてみた

2018/07 `みんなのPython勉強会#37 <https://startpython.connpass.com/event/81625/>`_ （東京）
------------------------------------------------------------------------------------------------------------------------------------------------

* 家永さん「『テスト駆動開発』を通じてプログラマがコードと向き合う活動を改めて学び直す」

    TDDのリズムがどのようなものかの雰囲気をつかめる内容です。

* やってみたいが、独学の中では難しく・・

お品書き：テスト駆動開発と私
------------------------------------------------

* 認知
* **実践開始** （手を動かし始めた）
* 実践中

2019年、ユーザベースにJoinし、テスト駆動開発を実践開始
======================================================================

`ユーザベースのTDD文化 <https://zine.qiita.com/event/202106-uzabase/>`_ （TDDだけというよりXPを実践しています）

💥知っていたテストコードとのギャップ
======================================================================

「やってみたかった」テスト駆動開発の現実は・・・

知っていたテストコード
------------------------------------------------

.. code-block:: python

    class FizzBuzzTestCase(TestCase):
        def test_return_fizzbuzz(self):
            actual = fizzbuzz(15)

            # テスト対象の処理の返り値と期待値が一致するか比較
            self.assertEqual(actual, "FizzBuzz")

実践の中で目にしたコード（イメージ）
------------------------------------------------

.. literalinclude:: ../../samplecode/tdd/test_awesome_module.py
    :language: python
    :pyobject: MainTestCase
    :linenos:

出会ったのは、**設計** としてのテスト
======================================================================

モック主義TDD
------------------------------------------------

    モックを活用すれば、テスト駆動開発自体が、開発する要求や対象の世界を理解していくうえでの設計ツールになり、（『テスト駆動開発』付録C）

``unittest.mock`` 😳
------------------------------------------------

オススメのドキュメント `unittest.mock --- 入門 <https://docs.python.org/ja/3/library/unittest.mock-examples.html>`_

呼び出す先の実装は後回しにしてTDD
------------------------------------------------

.. literalinclude:: ../../samplecode/tdd/awesome_module.py
    :language: python
    :linenos:

Practice, practice, practice!!
------------------------------------------------

* ``unittest.mock`` を使ったコードが読み書きできるように **ひたすら練習**
* 練習例（2019年） https://github.com/ftnext/pyconjp2019.sprint.theme.update/tree/master/tests

お品書き：テスト駆動開発と私
------------------------------------------------

* 認知
* 実践開始
* **実践中** （感じていること）

テスト駆動開発のここが好き
======================================================================

1.変更したときに他を壊していないという安心感🤗
======================================================================

かつての不安は、今は **退屈**
------------------------------------------------

    テストは不安を退屈に変える賢者の石だ。（『テスト駆動開発』第25章）

2.設計としてのテスト⚒（モック主義TDD）
======================================================================

目標は、動作するきれいなコード
------------------------------------------------

* 動作するけど *きれい* か？（変更しやすいか？） 2020/05 `Remote.py 発表資料 <https://docs.google.com/presentation/d/1YP03-0THNmWLdqIi_hrcgi-k7y_2G7jj5iWXf973Ew4/edit#slide=id.g774fdc25c3_0_235>`_
* テストが書きにくいならば **設計を見直す**
* 道半ばですが、練習初期のテストコードと比較すると成長実感

お品書き：テスト駆動開発と私
------------------------------------------------

* 認知
* 実践開始
* **実践中** （試していること）

考え方をデータサイエンスにも取り入れる（お試し中）
======================================================================

データサイエンスのコードは *書き捨て* と言われる
------------------------------------------------

* PyCon mini Hiroshima 2020 「`データサイエンスのためのリーダブルコードのススメ <https://ytknzw.github.io/PyCon/PyCon_mini_Hiroshima/%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%83%AA%E3%83%BC%E3%83%80%E3%83%96%E3%83%AB%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E3%82%B9%E3%82%B9%E3%83%A1_PyCon_mini_Hiroshima_20201010.pdf>`_」 `アーカイブ <https://youtu.be/Brg7LXL3bSo?t=8400>`_
* 「コードはアウトプットを作成する手段」

書き捨てコードにフィードバックサイクルを
------------------------------------------------

* テスト駆動開発で体験した **フィードバックサイクル**
* データサイエンスの（書き捨て）コードにも持ち込めないか

お試し：doctest
======================================================================

Pythonのdocstring（ドキュメンテーション文字列）
------------------------------------------------

.. code-block:: python

    def awesome_function():
        """ここがdocstringです
        
        docstring = 関数（など）の最初の式である文字列リテラル
        ref: https://docs.python.org/ja/3/glossary.html#term-docstring
        """
        ...

標準ライブラリ doctest
------------------------------------------------

* docstringに **対話モードの実行例** を書く

  * 実行する式
  * 評価した値（期待値）

* :command:`python -m doctest example.py` で実行

doctestの例
------------------------------------------------

.. code-block:: python

    def factorial(n):
        """
        >>> [factorial(n) for n in range(6)]
        [1, 1, 2, 6, 24, 120]
        """
        ...

ref: `doctest --- 対話的な実行例をテストする <https://docs.python.org/ja/3/library/doctest.html>`_

データサイエンスのコードでdoctest
------------------------------------------------

* 関数の **実装前** にdocstringに **実行例** を書く
* 実装がちょっと不安な処理（データの複雑な変換など）をdoctestで頻繁に検証（不安を退屈に変える）
* 同様の例：Qiita `忙しい研究者のためのテストコードとドキュメントの書き方 <https://qiita.com/hmkz/items/0689cd85fb3e1adcda1a>`_

まとめ🌯：テスト駆動開発と私
======================================================================

* テスト駆動開発、好きです！
* 不安が **退屈** に変わるなど、恩恵感じてます
* データサイエンスの"書き捨て"コードでもTDDの考え方適用できるのでは？

ご清聴ありがとうございました
------------------------------------------------

Enjoy development with TDD!

お前、誰よ（＝自己紹介）
------------------------------------------------

* nikkie（にっきー） :raw-html:`<i class="fab fa-twitter"></i>` `@ftnext <https://twitter.com/ftnext>`_ / :raw-html:`<i class="fab fa-github"></i>` `@ftnext <https://github.com/ftnext>`_
* アニメが好き。アイの歌声を聴かせてはいいぞ！
* 2022/01/22 `PyCon Kyushu 2022 Kumamoto <https://kyushu.pycon.jp/2022/>`_ で話します（よろしければ熊本城ホールでお会いしましょう！）

アイの歌声を聴かせてはいいぞ！！
------------------------------------------------

.. raw:: html

    <iframe width="800" height="480" src="https://ftnext.github.io/2021_slides/ainouta/recommend_as_best.html"
        title="アイうたはいいぞ"></iframe>

Appendix
======================================================================

補足：家永さんトーク ``@skip``
------------------------------------------------

* アーカイブ https://youtu.be/TZmR095OWz8?t=2000
* `家永さんによる登壇報告 <https://twop.agile.esm.co.jp/i-like-tdd-16d9ce2c2201>`_
