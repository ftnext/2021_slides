.. role:: raw-html(raw)
    :format: html

======================================================================
テスト駆動開発と私
======================================================================

:Event: Tech BASE Okinawa
:Presented: 2021/12/18 nikkie

はじめまして、nikkie（にっきー）です
======================================================================

nikkie（にっきー）
------------------------------------------------

* 東京から来ました（飛行機に乗り遅れたりしながら・・）
* 株式会社ユーザベースのデータサイエンティスト（NLPer）
* Python大好き！（PyCon JP 2021 座長）

初の沖縄の感想：冬過ごすのに絶好では？
------------------------------------------------

.. raw:: html

    <blockquote class="twitter-tweet"><p lang="ja" dir="ltr">12月に訪れた沖縄の感想<br><br>暖房入ってますよね？</p>&mdash; nikkie 📣PyCon JP 2021 ありがとうございました (@ftnext) <a href="https://twitter.com/ftnext/status/1471863785241845760?ref_src=twsrc%5Etfw">December 17, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

このLTでは、テスト駆動開発を始めて **開発経験が変わった** ことを共有します
================================================================================

注：「私」の話なので、 **N=1** です

お品書き：テスト駆動開発と私
------------------------------------------------

* 認知
* 実践開始
* 実践中

お品書き：テスト駆動開発と私
------------------------------------------------

* **認知**
* 実践開始
* 実践中

認知：Pythonコミュニティで「テスト駆動開発」と出会った
======================================================================

2018/02 `PyLadies Tokyo Meetup #29 テストをまなぼう <https://pyladies-tokyo.connpass.com/event/76967/>`_
------------------------------------------------------------------------------------------------------------------------------------------------

* :raw-html:`<i class="fab fa-github"></i>` https://github.com/okusama27/pyladies_2018_02/blob/master/samples/fizzbuzz/test_fizzbuzz_6.py
* 資料がわかりやすく、マネてテストコードを書いてみた

2018/07 `みんなのPython勉強会#37 <https://startpython.connpass.com/event/81625/>`_ （東京）
------------------------------------------------------------------------------------------------------------------------------------------------

* 家永さん「『テスト駆動開発』を通じてプログラマがコードと向き合う活動を改めて学び直す」

    TDDのリズムがどのようなものかの雰囲気をつかめる内容です。

補足：家永さんトーク ``@skip``
------------------------------------------------

* アーカイブ https://youtu.be/TZmR095OWz8?t=2000
* `家永さんによる登壇報告 <https://twop.agile.esm.co.jp/i-like-tdd-16d9ce2c2201>`_

お品書き：テスト駆動開発と私
------------------------------------------------

* 認知
* **実践開始**
* 実践中

2019年、ユーザベースにJoinし、テスト駆動開発を実践開始
======================================================================

XPを実践しています（TDDのほか、ペアプロなど）

💥知っていたテストコードとのギャップ
======================================================================

「やってみたかった」テスト駆動開発でしたが、現実は・・・

知っていたテストコード
------------------------------------------------

TODO

実践の中で目にしたコード（イメージ）
------------------------------------------------

TODO

``unittest.mock`` 😳
------------------------------------------------

オススメのドキュメント `unittest.mock --- 入門 <https://docs.python.org/ja/3/library/unittest.mock-examples.html>`_

出会ったのは、**設計** としてのテスト
======================================================================

モック主義TDD
------------------------------------------------

    モックを活用すれば、テスト駆動開発自体が、開発する要求や対象の世界を理解していくうえでの設計ツールになり、（『テスト駆動開発』付録C）

Practice, practice, practice!!
------------------------------------------------

* ``unittest.mock`` を使ったコードが読み書きできるように **ひたすら練習**
* 経過の一例：2020/05 `Remote.py 発表資料 <https://docs.google.com/presentation/d/1YP03-0THNmWLdqIi_hrcgi-k7y_2G7jj5iWXf973Ew4/edit#slide=id.g774fdc25c3_0_235>`_

お品書き：テスト駆動開発と私
------------------------------------------------

* 認知
* 実践開始
* **実践中** （感じていること）

テスト駆動開発に感じているメリット
======================================================================

1.変更したときに他を壊していないという安心感🤗
======================================================================

かつての不安は、今は **退屈**
------------------------------------------------

    テストは不安を退屈に変える賢者の石だ。（『テスト駆動開発』第25章）

2.デバッグ、試行錯誤不要🤗
======================================================================

TDDで開発したら、一発でバシッと動いた！
------------------------------------------------

* テスト駆動開発したら、**デバッグ不要** になることを経験
* テストを書かない場合、スクリプトは思ったとおり動かなくてデバッグは付き物
* 未知のライブラリは *対話モードで使い方を把握してから* テスト書いています

お品書き：テスト駆動開発と私
------------------------------------------------

* 認知
* 実践開始
* **実践中** （試していること）

考え方をデータサイエンスにも取り入れる（お試し中）
======================================================================

書き捨てコードにフィードバックサイクルを
------------------------------------------------

* データサイエンスのコードは *書き捨て* と言われる（PyCon mini Hiroshima 2020 「`データサイエンスのためのリーダブルコードのススメ <https://ytknzw.github.io/PyCon/PyCon_mini_Hiroshima/%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%83%AA%E3%83%BC%E3%83%80%E3%83%96%E3%83%AB%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E3%82%B9%E3%82%B9%E3%83%A1_PyCon_mini_Hiroshima_20201010.pdf>`_」）
* テスト駆動開発で体験した **フィードバックサイクル** を回しながらデータサイエンスのコードを書きたい

お試し1：doctest
======================================================================

Pythonのdocstring（ドキュメンテーション文字列）
------------------------------------------------

.. code-block:: python

    def awesome_function():
        """ここがdocstringです
        
        docstring = 関数（など）の最初の式である文字列リテラル
        ref: https://docs.python.org/ja/3/glossary.html#term-docstring
        """
        ...

標準ライブラリ doctest
------------------------------------------------

* docstringに **対話モードの実行例** を書く

  * 実行する式
  * 評価した値（期待値）

* :command:`python -m doctest example.py` で実行

doctestの例
------------------------------------------------

.. code-block:: python

    def factorial(n):
        """
        >>> [factorial(n) for n in range(6)]
        [1, 1, 2, 6, 24, 120]
        """
        ...

ref: `doctest --- 対話的な実行例をテストする <https://docs.python.org/ja/3/library/doctest.html>`_

データサイエンスのコードでdoctest
------------------------------------------------

* 関数の実装前にdocstringに実行例を書く
* 重要でちょっと不安な処理（データの変換など）をdoctestで頻繁に検証（不安を退屈に変える）
* 同様の例：Qiita `忙しい研究者のためのテストコードとドキュメントの書き方 <https://qiita.com/hmkz/items/0689cd85fb3e1adcda1a>`_

お試し2：``fast_dev_run``
======================================================================

機械学習モデルの訓練コード
------------------------------------------------

* ちょいちょいある：長い訓練の後に実装ミスで落ちる
* もっと早くフィードバックを得たい

PyTorch LightningのTrainer
------------------------------------------------

* ``Trainer(fast_dev_run=True)`` （`ドキュメント <https://pytorch-lightning.readthedocs.io/en/latest/common/trainer.html#fast-dev-run>`_）
* バッチ1回分のデータで訓練
* 訓練スクリプトが **最後まで動くかどうか** 分かる

要は、少量データで試す
------------------------------------------------

* PyTorch Lightningを使わないシーンでは、少量データを用意（:command:`head` で抜き出すなど）
* 訓練スクリプトに少量データを渡して、最後まで動くか確認

まとめ🌯：テスト駆動開発と私
======================================================================

* テスト駆動開発、好きです！
* 不安が退屈に変わるなど、メリット感じています
* データサイエンスの"書き捨て"コードにも試しています
