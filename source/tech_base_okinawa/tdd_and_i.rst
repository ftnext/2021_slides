.. role:: raw-html(raw)
    :format: html

======================================================================
テスト駆動開発と私
======================================================================

:Event: Tech BASE Okinawa
:Presented: 2021/12/18 nikkie

TODO このLTでは、

Pythonコミュニティで「テスト駆動開発」と出会った
======================================================================

2018/02 `PyLadies Tokyo Meetup #29 テストをまなぼう <https://pyladies-tokyo.connpass.com/event/76967/>`_
------------------------------------------------------------------------------------------------------------------------------------------------

* :raw-html:`<i class="fab fa-github"></i>` https://github.com/okusama27/pyladies_2018_02/blob/master/samples/fizzbuzz/test_fizzbuzz_6.py
* 資料がわかりやすく、マネてテストコードを書いてみた

2018/07 `みんなのPython勉強会#37 <https://startpython.connpass.com/event/81625/>`_ （東京）
------------------------------------------------------------------------------------------------------------------------------------------------

* 家永さん「『テスト駆動開発』を通じてプログラマがコードと向き合う活動を改めて学び直す」

    | TDDのリズムがどのようなものかの雰囲気をつかめる内容です。
    | 講演の終わりに、お家で書籍１部の多国通貨をTDDで写経したくなったら幸いです。

補足：家永さんトーク ``@skip``
------------------------------------------------

* アーカイブ https://youtu.be/TZmR095OWz8?t=2000
* `家永さんによる登壇報告 <https://twop.agile.esm.co.jp/i-like-tdd-16d9ce2c2201>`_

2019年、UzabaseにJoinし、テスト駆動開発を実践
======================================================================

XPを実践しています（TDDのほか、ペアプロなど）

💥知っていたテストコードとのギャップ
======================================================================

知っていたテストコード
------------------------------------------------

TODO

実践の中で目にしたコード（イメージ）
------------------------------------------------

TODO

``unittest.mock`` 😳
------------------------------------------------

オススメのドキュメント `unittest.mock --- 入門 <https://docs.python.org/ja/3/library/unittest.mock-examples.html>`_

出会ったのは、**設計** としてのテスト
======================================================================

モック主義TDD
------------------------------------------------

    モックを活用すれば、テスト駆動開発自体が、開発する要求や対象の世界を理解していくうえでの設計ツールになり、（『テスト駆動開発』付録C）

Practice, practice, practice!!
------------------------------------------------

* ``unittest.mock`` を使ったコードが読み書きできるように **ひたすら練習**
* 経過の一例：2020/05 `Remote.py 発表資料 <https://docs.google.com/presentation/d/1YP03-0THNmWLdqIi_hrcgi-k7y_2G7jj5iWXf973Ew4/edit#slide=id.g774fdc25c3_0_235>`_

テスト駆動開発に感じているメリット
======================================================================

1.変更したときに他を壊していないという安心感🤗
======================================================================

かつての不安は、今は **退屈**
------------------------------------------------

    テストは不安を退屈に変える賢者の石だ。（『テスト駆動開発』第25章）

2.デバッグ、試行錯誤不要🤗
======================================================================

TDDで開発したら、一発でバシッと動いた！
------------------------------------------------

* テスト駆動開発したら、デバッグ不要になることを経験
* テストを書かない場合は、思ったとおり動かなくてデバッグは付き物
* 未知のライブラリは対話モードで使い方を把握してからテスト書いています

データサイエンスにも取り入れる
======================================================================

doctest

``fast_dev_run``

まとめ🌯：テスト駆動開発と私
======================================================================
