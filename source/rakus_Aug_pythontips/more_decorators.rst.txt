より便利なデコレータを書くために
============================================================

* 参照と代入それぞれのスコープの扱い
* 引数を取るデコレータ

例：優先したかどうかを返す優先ソート
============================================================

.. code-block:: python
    :linenos:

    def sort_priority(values, group):
        found = False
        def helper(x):
            if x in group:
                found = True
                return (0, x)
            return (1, x)
        values.sort(key=helper)
        return found

:raw-html:`<i class="fab fa-github"></i>` https://github.com/bslatkin/effectivepython/blob/master/example_code/item_21.py#L65

優先したかを返していない？🤨
------------------------------------------------

.. doctest を通す
    >>> def sort_priority(values, group):
    ...     found = False
    ...     def helper(x):
    ...         if x in group:
    ...             found = True
    ...             return (0, x)
    ...         return (1, x)
    ...     values.sort(key=helper)
    ...     return found

.. code-block:: python

    >>> values = [1, 4, 3, 5, 2]
    >>> # valuesを素数を優先して並び替えているが、返り値はFalse
    >>> sort_priority(values, {2, 3, 5})
    False
    >>> values
    [2, 3, 5, 1, 4]

なぜ優先したかを返さない？
------------------------------------------------

* 変数の参照のスコープ解決順
* 代入のスコープ解決

変数の参照のスコープ解決順
============================================================

1. 現在の関数のスコープ
2. （他の関数の中にある場合）外側のスコープ
3. グローバルスコープ（コードを含むモジュールのスコープ）
4. 組み込みスコープ

『Effective Python 第2版』p.81

例：クロージャ ``helper`` の ``group``
------------------------------------------------

.. code-block:: python
    :linenos:

    def sort_priority(values, group):
        found = False
        def helper(x):
            if x in group:  # 外側のスコープのgroupを参照
                found = True
                return (0, x)
            return (1, x)
        values.sort(key=helper)
        return found

代入のスコープ解決
============================================================

    変数が現在のスコープに存在しないと、Pythonは、代入を変数定義のように扱います

『Effective Python 第2版』p.81

なぜ優先したかを返さなかったか？
------------------------------------------------

.. code-block:: python
    :linenos:

    def sort_priority(values, group):
        found = False
        def helper(x):
            if x in group:
                # 以下はhelperのスコープで変数foundを定義
                found = True  # 2行目のfoundとは無関係
                return (0, x)
            return (1, x)
        values.sort(key=helper)
        return found  # sort_priorityのスコープのfound

💡解決策： ``nonlocal`` 文
============================================================

.. code-block:: python
    :linenos:

    def sort_priority(values, group):
        found = False
        def helper(x):
            nonlocal found  # sort_priorityのfound
            if x in group:
                found = True  # helperのスコープから代入できる！（nonlocalの効果）
                return (0, x)
            return (1, x)
        values.sort(key=helper)
        return found

優先したかを返すように！🙌
------------------------------------------------

.. doctest を通す
    >>> def sort_priority(values, group):
    ...     found = False
    ...     def helper(x):
    ...         nonlocal found
    ...         if x in group:
    ...             found = True
    ...             return (0, x)
    ...         return (1, x)
    ...     values.sort(key=helper)
    ...     return found

.. code-block:: python

    >>> values = [1, 4, 3, 5, 2]
    >>> sort_priority(values, {2, 3, 5})
    True
    >>> values
    [2, 3, 5, 1, 4]

``nonlocal`` を使ったデコレータ：呼び出しは1分に1回
------------------------------------------------------------------------------------------------

.. literalinclude:: ../../samplecode/decorators/call_limit_decorators.py
    :language: python
    :pyobject: once_per_minute
    :linenos:

より便利なデコレータを書くために
------------------------------------------------

* 参照と代入それぞれのスコープの扱い
* **引数を取るデコレータ**

デコレータの例（FastAPI）
============================================================

.. code-block:: python

    @app.get("/")
    async def root():
        return {"message": "Hello World"}

https://fastapi.tiangolo.com/ja/tutorial/first-steps/

引数を取るデコレータはどう書く？
------------------------------------------------

* **3つの関数** で実装する

.. code-block:: python

    def decorator_with_args(x, y):  # 引数を受け取りmiddleを返す
        def middle(func):  # 関数を受け取りwrapperを返す
            def wrapper(*args, **kwargs):
                ...
            return wrapper
        return middle

引数を取るデコレータ：呼び出しはN分に1回
============================================================

.. literalinclude:: ../../samplecode/decorators/call_limit_decorators.py
    :language: python
    :pyobject: once_per_n_minutes
    :linenos:

引数を渡してデコレート
------------------------------------------------

.. literalinclude:: ../../samplecode/decorators/call_limit_decorators.py
    :language: python
    :pyobject: calculate_bmi2
    :linenos:

.. literalinclude:: ../../samplecode/decorators/call_limit_decorators.py
    :language: python
    :pyobject: calculate_bmi3
    :linenos:

引数を渡してデコレート 実行例
------------------------------------------------

.. doctest を通す（デコレータは除いた実装）
    >>> def calculate_bmi2(height_m, weight_kg):
    ...     return weight_kg / height_m / height_m
    >>> def calculate_bmi3(height_m, weight_kg):
    ...     return weight_kg / height_m / height_m

.. code-block:: python

    >>> calculate_bmi2(1.58, 46)
    18.426534209261334
    >>> calculate_bmi2(1.58, 46)
    18.426534209261334
    >>> calculate_bmi3(1.58, 46)
    18.426534209261334
    >>> # calculate_bmi3(1.58, 46)  # Raise RunTooOftenError

🥟小まとめ：より便利なデコレータを書くために
============================================================

* 外側のスコープの変数、参照できるが、 **代入** には ``nonlocal`` 文
* 引数を取るデコレータは、 **3つ** の関数で実装
