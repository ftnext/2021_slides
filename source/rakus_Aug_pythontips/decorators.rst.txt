デコレータ（用語集）
============================================================

    別の関数を返す関数で、通常、 @wrapper 構文で関数変換として適用されます

https://docs.python.org/ja/3/glossary.html#term-decorator

デコレータの例（Django）
------------------------------------------------

.. code-block:: python

    from django.contrib.auth.decorators import login_required

    @login_required
    def post_new(request):  # デコレータをつけることで、ログイン必須にできる
        ...

https://tutorial-extensions.djangogirls.org/ja/authentication_authorization#nono

デコレータ
------------------------------------------------

* *「ラップする関数への呼び出しの前後で追加コードを実行することができます」* （『Effective Python 第2版』項目26 p.97）
* Djangoの ``login_required`` は ``post_new`` 関数の前に、ログインを検証するコードを実行した

``@`` はシンタックスシュガー
------------------------------------------------

以下の2つは同じ

.. code-block:: python

    def f(...):
        ...

    f = awesome_decorator(f)

.. code-block:: python

    @awesome_decorator
    def f(...):
        ...

簡単なデコレータを作ってみる
============================================================

* ラップする関数に **追加** するコード

  * 実行前に開始する旨を出力
  * 実行後に終了する旨を出力

関数の開始と終了を示すデコレータ
------------------------------------------------

.. code-block:: python
    :linenos:

    def show_start_end(func):
        def wrapper(*args, **kwargs):
            print(func.__name__, "Start")
            returned = func(*args, **kwargs)
            print(func.__name__, "End")
            return returned
        return wrapper

.. doctest を通す
    >>> def show_start_end(func):
    ...     def wrapper(*args, **kwargs):
    ...         print(func.__name__, "Start")
    ...         returned = func(*args, **kwargs)
    ...         print(func.__name__, "End")
    ...         return returned
    ...     return wrapper

関数の開始と終了を示すデコレータを使う
------------------------------------------------

.. code-block:: python
    :linenos:

    @show_start_end
    def calculate_bmi(height_m, weight_kg):
        return weight_kg / height_m / height_m

.. doctest を通す
    >>> @show_start_end
    ... def calculate_bmi(height_m, weight_kg):
    ...     return weight_kg / height_m / height_m

.. code-block:: python

    >>> calculate_bmi(1.58, 46)
    calculate_bmi Start
    calculate_bmi End
    18.426534209261334

``*args`` ? ``**kwargs`` ?
============================================================

2つのシーンで使う

* 関数定義
* 関数呼び出し

関数定義の ``*args``・ ``**kwargs``
============================================================

* ``*args``：可変個の **位置** 引数

  * 関数のスコープでは ``args`` は **タプル**

* ``**kwargs``：可変個の **キーワード** 引数

  * 関数のスコープでは ``kwargs`` は **辞書**

例：関数定義の ``*args``・ ``**kwargs``
------------------------------------------------

.. code-block:: python
    :linenos:

    def f(*args, **kwargs):
        print(args)
        print(kwargs)

.. doctest を通す
    >>> def f(*args, **kwargs):
    ...     print(args)
    ...     print(kwargs)

.. code-block:: python

    >>> f(1, 2, c=3)
    (1, 2)
    {'c': 3}

例：関数定義の ``*args``・ ``**kwargs`` 実行例
------------------------------------------------

.. code-block:: python

    >>> # 位置引数のみ渡した時、kwargsは空の辞書
    >>> f(1, 2, 3)
    (1, 2, 3)
    {}
    >>> # キーワード引数のみ渡した時、argsは空のタプル
    >>> f(a=1, b=2, c=3)
    ()
    {'a': 1, 'b': 2, 'c': 3}

関数呼び出しの ``*args``・ ``**kwargs``
============================================================

* タプルやリストなど **シーケンス** は ``*`` 演算子で、要素を位置引数に渡せる
* 辞書など **マッピング** は ``**`` 演算子で、``キー=値`` 形式で各要素をキーワード引数に渡せる

例：関数呼び出しの ``*args``・ ``**kwargs`` 実行例
------------------------------------------------------------------------------------------------

.. code-block:: python

    >>> # シーケンスを * を使って渡す（argsがタプルとして受け取る）
    >>> f(*[1,2,3])
    (1, 2, 3)
    {}
    >>> # マッピングを ** を使って渡す（kwargsが辞書として受け取る）
    >>> f(**{"a": 1, "b": 2, "c": 3})
    ()
    {'a': 1, 'b': 2, 'c': 3}

再掲：関数の開始と終了を示すデコレータ
------------------------------------------------

.. code-block:: python
    :linenos:

    def show_start_end(func):
        def wrapper(*args, **kwargs):
            print(func.__name__, "Start")
            # wrapper に渡された位置引数、キーワード引数はfuncに渡されるということ
            returned = func(*args, **kwargs)
            print(func.__name__, "End")
            return returned
        return wrapper

デコレータを作るときのtips
============================================================

* ``f = awesome_decorator(f)`` という代入の落とし穴

落とし穴😱
------------------------------------------------

.. code-block:: python
    :linenos:

    @show_start_end
    def fully_documented_bmi(height_m, weight_kg):
        """Calculate BMI (body mass index)."""
        return weight_kg / height_m / height_m

.. doctest を通す
    >>> @show_start_end
    ... def fully_documented_bmi(height_m, weight_kg):
    ...     """Calculate BMI (body mass index)."""
    ...     return weight_kg / height_m / height_m

.. code-block:: python

    >>> fully_documented_bmi.__name__  # show_start_endが返す関数の名
    'wrapper'
    >>> print(fully_documented_bmi.__doc__)  # 失われたdocstring
    None

💡解決策： ``functools.wraps``
------------------------------------------------

.. code-block:: python
    :linenos:

    from functools import wraps

    def show_start_end(func):
        @wraps(func)  # wrapperをデコレートする
        def wrapper(*args, **kwargs):
            print(func.__name__, "Start")
            returned = func(*args, **kwargs)
            print(func.__name__, "End")
            return returned
        return wrapper

.. doctest を通す
    >>> from functools import wraps
    >>> def show_start_end(func):
    ...     @wraps(func)
    ...     def wrapper(*args, **kwargs):
    ...         print(func.__name__, "Start")
    ...         returned = func(*args, **kwargs)
    ...         print(func.__name__, "End")
    ...         return returned
    ...     return wrapper

``functools.wraps`` で落とし穴回避🙌
------------------------------------------------

.. code-block:: python
    :linenos:

    @show_start_end
    def fully_documented_bmi(height_m, weight_kg):
        """Calculate BMI (body mass index)."""
        return weight_kg / height_m / height_m

.. doctest を通す
    >>> @show_start_end
    ... def fully_documented_bmi(height_m, weight_kg):
    ...     """Calculate BMI (body mass index)."""
    ...     return weight_kg / height_m / height_m

.. code-block:: python

    >>> fully_documented_bmi.__name__  # デコレータを付けた関数自体の名！
    'fully_documented_bmi'
    >>> print(fully_documented_bmi.__doc__)  # docstringが失われていない！
    Calculate BMI (body mass index).

🥟小まとめ：デコレータ
============================================================

* 関数の呼び出し前後に処理を追加できる
* **関数を返す関数** として実装
* 関数定義と関数呼び出しで ``*args``・ ``**kwargs`` を使う
* ワンポイント： ``functools.wraps``

``@skip`` （時間があれば）私が車輪の再実装したデコレータ
============================================================

.. literalinclude:: ../../samplecode/decorators/cached_decorator.py
    :language: python
    :pyobject: cache_enabled
    :linenos:

お品書き：デコレータについて
------------------------------------------------

* Pythonの関数
* デコレータ
* **より便利なデコレータを書くために**
