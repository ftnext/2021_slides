キャッシュ
============================================================

* 機械学習モデルをインタラクティブに触れるStreamlit製アプリ（例：デモアプリ）
* モデルの推論には **時間がかかる** ことも
* インタラクションがあるたびにスクリプトを再実行🤔

:file:`first.py` でシミュレート
------------------------------------------------

* モデルに推論させる関数（＝時間のかかる処理）を単純化
* ``time.sleep`` で必ず2秒かかる関数とする

:file:`first.py`
------------------------------------------------

.. code-block:: python
    :linenos:

    import time

    import streamlit as st


    def expensive_computation(a, b):
        time.sleep(2)
        return a * b


    a = 2
    b = 21
    res = expensive_computation(a, b)

    st.write("Result:", res)

ブラウザ画面を確認
------------------------------------------------

* 2秒経過してからResultを表示
* ブラウザをリロードすると **毎回2秒待つ**

``@st.cache`` で関数をデコレート
============================================================

* 端的に言うと、 **インメモリのKVS** （key-value store）
* イメージ「同じ引数で関数を実行した結果がキャッシュにあれば、 **関数を呼び出さずに** キャッシュから返す」
* ⚠️キャッシュのキーは引数だけではないので「イメージ」です

:file:`first.py` を変更
------------------------------------------------

.. code-block:: python
    :emphasize-lines: 6
    :linenos:

    import time

    import streamlit as st


    @st.cache
    def expensive_computation(a, b):
        time.sleep(2)
        return a * b


    a = 2
    b = 21
    res = expensive_computation(a, b)

    st.write("Result:", res)

ブラウザ画面を確認（キャッシュの効能）
------------------------------------------------

* 初回表示は、2秒経過してからResultを表示
* ブラウザをリロードすると2秒待たずにResultを表示（キャッシュが効いている）

デモアプリでもキャッシュを利用
------------------------------------------------

* モデル・Tokenizerの読み込み（初回1回だけ）
* テキスト生成

  * ``@st.cache`` によるキャッシュは **ユーザー間で共通**
  * 私が試したのと同じテキストなら、キャッシュを使って結果を返す

Streamlit Principle 3
============================================================

    スクリプトを再実行する方針ゆえ、キャッシュ利用を指定すべし

キャッシュについて詳しく知るために
------------------------------------------------

* 公式ドキュメント `Improve app performance <https://docs.streamlit.io/en/stable/caching.html>`_
* 上のドキュメントを読んで書いた拙ブログ `魔法みたいな機能満載のStreamlit。その中でもとびっきりの魔法、キャッシュについて <https://nikkie-ftnext.hatenablog.com/entry/streamlit-magical-cache>`_
* ``max_entries`` や ``ttl`` の設定例 https://towardsdatascience.com/advanced-streamlit-caching-6f528a0f9993

小まとめ🥟：Streamlit Principles
============================================================

1. Pythonスクリプト、是れ即ちアプリ
2. 最新の値を変数に代入してスクリプトを再実行
3. スクリプトを再実行する方針ゆえ、キャッシュ利用を指定すべし
