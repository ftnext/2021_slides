Timetable as YAML
============================================================

今回紹介する事例

注意事項
------------------------------------------------

* タイムテーブル作成はマイナーなタスク（みんながやるわけではない）
* 共有したいのは、Pythonで自動化するときの **考え方**
* 具体的なタイムテーブル作成ロジックに興味ある方は `ソースコード <https://github.com/ftnext/python-as-pyconjp-staff/tree/78c6f90b50944acac309fbc7873c779f2d943210/timetable_maker>`_ をどうぞ

タスク：タイムテーブル作成
============================================================

* スタッフ用のタイムテーブル
* 企画段階で **カンファレンスの全体像を描く** のに使う
* Googleスプレッドシートで共有

スタッフ用タイムテーブル（イメージ）
------------------------------------------------

.. figure:: ../_static/osc_spring_Mar/202103_osc_staff_talk_staff_timetable.drawio.png
    :width: 125%

.. 人間が作るとこう（実物はスタッフ限定なので、見せない）

スタッフ用タイムテーブル（イメージ）
------------------------------------------------

* カンファレンスの **全体像** ＝この時間帯はどの部屋で、基調講演／トーク／パーティー etc.
* 並行しているトラックが分かる（スタッフ配置のイメージ）
* 5分刻みで具体化していく（初版は荒く15分刻み）

変更しづらい😫
============================================================

解決したい課題

*タイムテーブル作成をPythonにやらせよう*

PyCon JP 2020 タイムテーブルは何回も変更
------------------------------------------------

* スタッフから意見をもらい、トークの枠を **並べ替え**
* 現地開催➡オンライン開催と方針転換（ベースにしつつも大きく変更）

  * 休憩時間変更で **◯印を移動**

トーク並べ替えの例
------------------------------------------------

お昼のあとのトーク、30分➡️45分と並べた

.. figure:: ../_static/osc_spring_Mar/202103_osc_staff_talk_timetable_before.drawio.png
    :width: 125%

トーク並べ替えの例
------------------------------------------------

意見を聞いて45分➡️30分に並べ替える

.. figure:: ../_static/osc_spring_Mar/202103_osc_staff_talk_timetable_after.drawio.png
    :width: 125%

.. スプレッドシートの関数を使って、row()を元にtimeを算出できれば少し楽になるかもしれない

💡タイムテーブルの出力（◯印）は自動で
============================================================

解決案

役割分担！
------------------------------------------------

* 時間帯の変更と **整合するように◯印を並べ替える** のがツラい
* 人間👨‍💼：時間帯だけにフォーカス
* 機械🤖：時間帯を元に○印を出力（Python🐍にアサイン）

Timetable as YAML 1/2
------------------------------------------------

* 人間が **時間帯・部屋・コンテンツを配置** し、YAMLで表す
* 2日間のカンファレンスなら ``1日目.yml`` と ``2日目.yml``

.. code-block:: yaml

    - rooms: ["#pyconjp_1", "#pyconjp_2", "#pyconjp_3", "#pyconjp_4", "#pyconjp_5"]
      start: 11:50
      end: 12:35
      title: トーク（45分）

Timetable as YAML 2/2
------------------------------------------------

* プログラムは入力されたYAMLを元に、**タイムテーブル（◯印付き）を出力**
* 出力先としてGoogleスプレッドシートもサポート

Demo
============================================================

.. code-block:: bash

    $ python main.py pyconjp2020-day1.yml \
    >     --step_min 5 \
    >     to_sheet <シートのID> \
    >     <サービスアカウントのJSONファイルのパス> \
    >     --output_worksheet_name pyconjp2020_day1

Timetable as YAML どう作るか？
============================================================

* 登場人物 整理
* ライブラリ 扱い方 確認
* 徐々にスクリプトを作る

Timetable as YAML どう作るか？
------------------------------------------------

* **登場人物 整理**
* ライブラリ 扱い方 確認
* 徐々にスクリプトを作る

登場人物 整理
============================================================

* やりたいことの登場人物をまず考え、使うライブラリを決める
* 参考 岩崎さん 「`入門書を読み終わったらなにしよう？ <https://www.slideshare.net/laughk/python-webapi-nextsteppythonprograming>`_ 」（スライド19）

Timetable as YAMLの登場人物
------------------------------------------------

* 入力：YAML形式のファイル
* 出力：Googleスプレッドシート

登場人物をPythonでどう扱う？
------------------------------------------------

* Pythonはサードパーティライブラリが **豊富**
* **検索** してメジャーなライブラリを掴む
* 目的が達成できそうなものを **選択**

🔍「python yaml」
------------------------------------------------

* **PyYAML** の情報が多く見つかった
* `ドキュメント <https://pyyaml.org/wiki/PyYAMLDocumentation>`_ が古い（Python 2系での記述）が、他のブログの情報でカバーできた
* 参考：`【PyYAML VS ruamel.yaml】PythonからYAMLファイルを触ってみた <https://dev.classmethod.jp/articles/getting-started-with-pyyaml-and-ruamel-yaml/>`_

🔍「python Googleスプレッドシート」
------------------------------------------------

* **gspread** の情報が多く見つかった
* ドキュメントを確認（`Quick Example <https://gspread.readthedocs.io/en/latest/#quick-example>`_、`Authentication <https://gspread.readthedocs.io/en/latest/oauth2.html>`_、`Examples <https://gspread.readthedocs.io/en/latest/user-guide.html>`_）→ 使いやすそう

補足：Googleスプレッドシートにプログラムからアクセス
------------------------------------------------

* **Sheets API** を呼び出している
* Sheets APIの有効化と、認証情報（サービスアカウント）の入手は、GCPのConsoleで操作が必要
* サービスアカウントの設定は『`仕事がはかどるPython自動処理 全部入り。 <https://book.impress.co.jp/books/1118101147>`_』を参照した

.. ドキュメントより、gspreadはSheets API v4のラッパー

Timetable as YAML どう作るか？
------------------------------------------------

* 登場人物 整理
* **ライブラリ 扱い方 確認**
* 徐々にスクリプトを作る

扱い方 確認
============================================================

* 使いたいライブラリを ``pip install`` （仮想環境を利用しています）

  * 参考：2020 `Python開発環境の整え方 <https://github.com/pyconjp/slides/blob/master/osc2020fukuoka/PITCHME.md>`_ （``venv``, ``pip``）

* ドキュメントの **サンプルコード** をPythonの **対話モード** で実行

.. code-block:: bash

    (venv) $ python
    >>>

PyYAML 扱い方確認
------------------------------------------------

sample.yml

.. code-block:: yaml

    ---
    - rooms: [Room A, Room B, Room C]
      start: 9:00
      end: 10:00
      title: 素敵なオープニング

PyYAML 扱い方確認
------------------------------------------------

.. code-block:: python

    >>> import yaml
    >>> with open("sample.yaml") as f:
    ...     data = yaml.load(f)
    ...
    <stdin>:2: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.

Warningについて：https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation

PyYAML 扱い方確認
------------------------------------------------

.. code-block:: python

    >>> with open("sample.yaml") as f:
    ...     data = yaml.load(f, Loader=yaml.BaseLoader)
    ...
    >>> data
    [{'rooms': ['Room A', 'Room B', 'Room C'], 'start': '9:00', 'end': '10:00', 'title': '素敵なオープニング'}]

``Loader=yaml.BaseLoader`` を指定すると、すべて文字列として読み込まれる

gspread 扱い方確認
------------------------------------------------

.. code-block:: python

    >>> import gspread
    >>> gc = gspread.service_account()
    >>> wks = gc.open_by_key("スプレッドシートのキー").sheet1

``https://docs.google.com/spreadsheets/d/<スプレッドシートのキー>/edit#gid=0``

gspread 扱い方確認
------------------------------------------------

.. code-block:: python

    >>> wks = gc.open_by_key("スプレッドシートのキー").sheet1
    >>> rows = [[1, 2], [3, 4]]
    >>> # A1, A2, B1, B2に値が入る
    >>> wks.update("A1", [[1, 2], [3, 4]])

一行をリストで表す。それを要素とするリストを引数に ``update`` を呼び出す

Timetable as YAML どう作るか？
------------------------------------------------

* 登場人物 整理
* ライブラリ 扱い方 確認
* **徐々にスクリプトを作る**

徐々にスクリプトを作る
============================================================

* 対話モードで確認したコードを少しずつ **スクリプトに移す**

  * 確認したPyYAMLの使い方を移動
  * 確認したgspreadの使い方（の一部）を移動

* ``python -i スクリプト`` がオススメ

``-i`` オプション（``python -i``）
------------------------------------------------

    最初の引数にスクリプトが指定された場合（中略）、スクリプトかコマンドを実行した後にインタラクティブモードに入ります。

https://docs.python.org/ja/3/using/cmdline.html#cmdoption-i

``-i`` オプション
------------------------------------------------

* スクリプトを実行した後に **対話モードに入る** ので、少しずつ作る際に便利
* 例：ワークシート ``wks`` が取得できたら移動してスクリプト実行

.. code-block:: python

    $ python -i main.py
    >>> # wks を使った処理を試す

Timetable as YAML どう作るか？
============================================================
    
* 登場人物 整理
* ライブラリ 扱い方 確認
* 徐々にスクリプトを作る

Timetable as YAML どう作るか？
------------------------------------------------

* ライブラリは **検索** して掴み、**ドキュメント** を確認
* **対話モード** や ``-i`` オプションを駆使して、扱い方を確認。**徐々に** スクリプトに
* タイムテーブル作成ロジックの実装はAppendixや `GitHub <https://github.com/ftnext/python-as-pyconjp-staff/tree/78c6f90b50944acac309fbc7873c779f2d943210/timetable_maker>`_ をどうぞ！
